import random
from managerDB import *
from managerTG import *
from keys import LOGIN_BD, PASSWORD_BD, NAME_BD, HOST, PORT, TOKEN_TG
from telebot import TeleBot, types
from telebot.handler_backends import State, StatesGroup
from managerTG import made_buttons

DB = ManangerDB(LOGIN_BD, PASSWORD_BD, NAME_BD, HOST, PORT)
bot = TeleBot(TOKEN_TG)

DB.create_table()
DB.import_base_words()


class MyState(StatesGroup):
    main_menu_state = State()
    add_word_step1 = State()
    add_word_step2 = State()
    word_EN = State()
    del_word_step1 = State()
    game_start = State()
    game_continue = State()
    game_mode = State()
    goal_word = State()
    right_trans = State()
    incorrect_trans = State()


@bot.message_handler(commands=['start'])
def start_bot(message):

    bot.delete_state(message.from_user.id, message.chat.id)
    userid = message.from_user.id
    if not DB.search_user(userid):
        DB.add_new_user(userid, message.from_user.first_name)

    welcome_message = '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞üá¨üáß.\n\n–Ø –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–µ–±–µ —Å–ª–æ–≤–æ, \
–∞ —Ç—ã –¥–æ–ª–∂–µ–Ω –±—É–¥–µ—à—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥.\n\n–¢–∞–∫–∂–µ —è –º–æ–≥—É –¥–æ–±–∞–≤–ª—è—Ç—å –∏ —É–¥–∞–ª—è—Ç—å –¥–ª—è —Ç–µ–±—è –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞üìù'
    bot.send_message(message.chat.id, welcome_message)

    change_mode_message = '–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å.'
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = made_buttons('–†–µ–∂–∏–º\nüá∑üá∫ -> üá¨üáß', '–†–µ–∂–∏–º\nüá¨üáß -> üá∑üá∫', '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æüìù', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ‚ùå')
    markup.add(*buttons)
    bot.send_message(message.chat.id, change_mode_message, reply_markup=markup)

@bot.message_handler(state=MyState.main_menu_state)
def mode_main_menu(message):

    bot.delete_state(message.from_user.id, message.chat.id)
    message_answ = '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º.'
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = made_buttons('–†–µ–∂–∏–º\nüá∑üá∫ -> üá¨üáß', '–†–µ–∂–∏–º\nüá¨üáß -> üá∑üá∫', '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æüìù', '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ‚ùå')
    markup.add(*buttons)
    bot.send_message(message.chat.id, message_answ, reply_markup=markup)


@bot.message_handler(func=lambda message: True)
def message_hand(message):

    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if data and 'state' in data:
            return

    if message.text == '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ':
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)
        return

    userid = message.from_user.id
    text = message.text

    if text == '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æüìù':

        bot.set_state(userid, MyState.add_word_step1, message.chat.id)

        message_answ = '–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = made_buttons('–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ')
        markup.add(*buttons)
        bot.send_message(message.chat.id, message_answ, reply_markup=markup)
        bot.register_next_step_handler(message, add_word_EN)

    if text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ‚ùå':

        bot.set_state(userid, MyState.del_word_step1, message.chat.id)

        message_answ = '–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ª–æ–≤–∞—Ä—è'
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        buttons = made_buttons('–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ')
        markup.add(*buttons)
        bot.send_message(message.chat.id, message_answ, reply_markup=markup)
        bot.register_next_step_handler(message, del_word)

    if text == '–†–µ–∂–∏–º\nüá∑üá∫ -> üá¨üáß' or text == '–†–µ–∂–∏–º\nüá¨üáß -> üá∑üá∫':

        bot.set_state(userid, MyState.game_start, message.chat.id)
        with bot.retrieve_data(userid, message.chat.id) as data:
            data['game_mode'] = text
        start_game(message)


@bot.message_handler(state=MyState.add_word_step1)
def add_word_EN(message):

    if message.text == '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ':
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)
        return

    userid = message.from_user.id
    word = message.text.capitalize()

    if not text_validate(word, mode='add_word_EN'):
        message_answ = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ —Ü–∏—Ñ—Ä –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.'
        bot.send_message(message.chat.id, message_answ)
        bot.register_next_step_handler(message, add_word_EN)
    else:
        word_EN = word
        if not DB.search_word(userid, word_EN):
            with bot.retrieve_data(userid, message.chat.id) as data:
                data['word_EN'] = word_EN
            message_answ = '–ù–∞–ø–∏—à–∏ —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º'
            bot.send_message(message.chat.id, message_answ)
            bot.set_state(userid, MyState.add_word_step2, message.chat.id)
            bot.register_next_step_handler(message, add_word_RU)
        else:
            message_answ = f'–°–ª–æ–≤–æ "{word_EN}" —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ.'
            bot.send_message(message.chat.id, message_answ)
            bot.register_next_step_handler(message, add_word_EN)

@bot.message_handler(state=MyState.add_word_step2)
def add_word_RU(message):

    if message.text == '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ':
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)
        return

    userid = message.from_user.id
    word = message.text.capitalize()

    if not text_validate(word, mode='add_word_RU'):
        message_answ = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –±–µ–∑ –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.'
        bot.send_message(message.chat.id, message_answ)
        bot.register_next_step_handler(message, add_word_RU)
    else:
        with bot.retrieve_data(userid, message.chat.id) as data:
            word_EN = data['word_EN']
        word_RU = word
        DB.add_new_word(userid, word_EN, word_RU)
        message_answ = f'–°–ª–æ–≤–æ "{word_EN}" —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º "{word_RU}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ª–æ–≤–∞—Ä—å.'
        bot.send_message(message.chat.id, message_answ)
        message_answ = '–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å'
        bot.send_message(message.chat.id, message_answ)
        bot.set_state(message.from_user.id, MyState.add_word_step1, message.chat.id)
        bot.register_next_step_handler(message, add_word_EN)

@bot.message_handler(state=MyState.del_word_step1)
def del_word(message):

    if message.text == '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ':
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)
        return

    userid = message.from_user.id
    word_EN = message.text

    if not DB.search_word(userid, word_EN):
        message_answ = f'–°–ª–æ–≤–æ "{word_EN}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.'
        bot.send_message(message.chat.id, message_answ)
        bot.register_next_step_handler(message, del_word)
    else:
        DB.del_new_word(userid, word_EN)
        message_answ = f'–°–ª–æ–≤–æ "{word_EN}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.'
        bot.send_message(message.chat.id, message_answ)
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)

@bot.message_handler(state=MyState.game_start)
def start_game(message):

    if message.text == '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ':
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)
        return

    userid = message.from_user.id

    with bot.retrieve_data(userid, message.chat.id) as data:
        mode = data['game_mode']
    if mode == '–†–µ–∂–∏–º\nüá∑üá∫ -> üá¨üáß':
        goal_word, right_trans, incorrect_trans = DB.get_words_for_game1(userid)
    else:
        goal_word, right_trans, incorrect_trans = DB.get_words_for_game2(userid)

    message_answ = f'–£–∫–∞–∂–∏ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\n"{goal_word}"'
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    words = incorrect_trans + [right_trans]
    random.shuffle(words)
    buttons = words + ['–ù–µ –∑–Ω–∞—é‚ùå', '–î–∞–ª—å—à–µ‚û°Ô∏è', '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ']
    buttons = made_buttons(*buttons)
    markup.add(*buttons)
    bot.send_message(message.chat.id, message_answ, reply_markup=markup)

    with bot.retrieve_data(userid, message.chat.id) as data:
        data['goal_word'] = goal_word
        data['right_trans'] = right_trans
        data['incorrect_trans'] = incorrect_trans

    bot.set_state(userid, MyState.game_continue, message.chat.id)
    bot.register_next_step_handler(message, continue_game)

@bot.message_handler(state=MyState.game_continue)
def continue_game(message):

    if message.text == '–í–ï–†–ù–£–¢–¨–°–Ø –í –ú–ï–ù–Æ':
        bot.set_state(message.from_user.id, MyState.main_menu_state, message.chat.id)
        mode_main_menu(message)
        return

    userid = message.from_user.id
    text = message.text

    with bot.retrieve_data(userid, message.chat.id) as data:
        right_trans = data['right_trans']

    if text == right_trans:
        message_answ = random.choice(['–ú–æ–ª–æ–¥–µ—Ü‚úÖ', '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!‚úÖ', '–ö—Ä—É—Ç–æ‚úÖ\n–î–∞–≤–∞–π –¥–∞–ª—å—à–µ!'])
        bot.set_state(userid, MyState.game_start, message.chat.id)
        bot.send_message(message.chat.id, message_answ)
        start_game(message)

    elif text == '–ù–µ –∑–Ω–∞—é‚ùå':
        message_answ = f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç "{right_trans}"'
        bot.set_state(userid, MyState.game_start, message.chat.id)
        bot.send_message(message.chat.id, message_answ)
        start_game(message)

    elif text == '–î–∞–ª—å—à–µ‚û°Ô∏è':
        bot.set_state(userid, MyState.game_start, message.chat.id)
        start_game(message)

    else:
        message_answ = random.choice(['–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–≤–µ—Ä–Ω–æ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ!', '–û—à–∏–±–∫–∞‚ùå', '–ù–µ–≤–µ—Ä–Ω–æ!\n–î–∞–≤–∞–π –µ—â–µ –ø–æ–ø—ã—Ç–∫—É.'])
        bot.send_message(message.chat.id, message_answ)
        bot.register_next_step_handler(message, continue_game)

print("Bot is running!")
bot.infinity_polling(skip_pending=True)
